	Абстракция и интерфейсы
	Абстрактиный класс
	и абстрактый метод

 Абстракция - это свойство системы, 
позволяющее описать общие характеристики
базового класса для всех его производных 
классов, а наполнение деталями 
предосталяется каждому из этих классов.

	про static поля и членов класса

Кроме обычных методов и полей класс 
может иметь статические поля, методы, 
константы и инициализаторы.

Они работают не на экзеплярах какого-то
типа данных. Что бы обратиться к static 
членам класса нужно обращаться через имя
типа.

* Статические поля

При создании объектов класса для каждого 
объекта создается своя копия нестатических 
обычных полей. А статические поля 
являются общими для всего класса. Поэтому 
они могут использоваться без создания 
объектов класса. Доступ к ним открыт.

* Статические методы

Статические методы также относятся ко 
всему классу в целом.

(!) При использовании статических методов 
надо учитывать ограничения: в статических 
методах мы можем вызывать только другие 
статические методы и использовать только 
статические переменные.

	про static метод в main class

При обращении к static членам класса нет
потребности в ссылках типа this или
super. Связынно это с тем что для static 
нет никакой иерархии всё работает через
обращение к имени типа, тут нет текущего
экзепляра класса и нет никакого базового 
типа который бы выступал в качестве 
значения или хранилища для этих 
элементов.

Есть точно так же несколько уровней 
досутпа к данным static классов:
public - доступно везде
protected - доступно в рамках текущего класса
так и в рамках классов наследников
privare - доступен только внутри текущего
класса

	Абастрактные классы и 
		методы

Для ограничения создания экземпляров 
какго то типа то в этом случае мы в названии
пишем что этот класс абстрактный.
В нем может быть определенный функционал
с точностью до модификаторов доступа но
в то же время нет возможности создания 
экземпляра этого типа.

(!) Закладывать функционал придется в 
рамках базвого класса.

* Определяются лишь общие поля и 
характеристики методов которые должны
быть реализованы в производных классах

* Если класс абстрактный то экземпляр
этого класса создать нельзя следовательно
и нет необходимости описывать логику 
того что в этих методах должно происходить.
Тут идёт указание на то что какое то 
поведение есть а вот как это будет 
реализованно это уже в производных 
классах в контексте иерархии классов. 

	Интерфейсы

Interface - предназначен для описания 
исключительно общего поведения 
сущностей 

Интерфейс - это частный случай класса. Он 
представляет собой полностью абстрактный
класс с абстрактными членами.

Удобно когда надо добавить доп. функионал
в классы испольуя и абстрацтные классы
и интерфейсы и наследуюясь от них можно
наследоваться от разных иерархий.

Как примере wow можно на пример 
унаследовать для воина функционал хила
Воинские свойства наследуются от 
абстрактного класса а хила (на пример пал) 
уже через интерфейс. 
(!) Это спасает нас от переписывания 
каждого метода и десятков перегрузок. 

public class Priest exteds hero implements healer

 итого:
Интерфейс — это контракт, который должен 
быть реализован конкретным классом.

Абстрактный класс похож на обычный, но 
отличается тем, что может содержать 
абстрактные методы — методы без 
реализации, и нельзя создать экземпляр 
абстрактного класса.